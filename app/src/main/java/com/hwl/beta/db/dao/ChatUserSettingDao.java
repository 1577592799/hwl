package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hwl.beta.db.entity.ChatUserSetting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_USER_SETTING".
*/
public class ChatUserSettingDao extends AbstractDao<ChatUserSetting, Long> {

    public static final String TABLENAME = "CHAT_USER_SETTING";

    /**
     * Properties of entity ChatUserSetting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property ChatBackImage = new Property(1, String.class, "chatBackImage", false, "CHAT_BACK_IMAGE");
        public final static Property IsShield = new Property(2, boolean.class, "isShield", false, "IS_SHIELD");
    }


    public ChatUserSettingDao(DaoConfig config) {
        super(config);
    }
    
    public ChatUserSettingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_USER_SETTING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"CHAT_BACK_IMAGE\" TEXT," + // 1: chatBackImage
                "\"IS_SHIELD\" INTEGER NOT NULL );"); // 2: isShield
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_USER_SETTING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatUserSetting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String chatBackImage = entity.getChatBackImage();
        if (chatBackImage != null) {
            stmt.bindString(2, chatBackImage);
        }
        stmt.bindLong(3, entity.getIsShield() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatUserSetting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String chatBackImage = entity.getChatBackImage();
        if (chatBackImage != null) {
            stmt.bindString(2, chatBackImage);
        }
        stmt.bindLong(3, entity.getIsShield() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChatUserSetting readEntity(Cursor cursor, int offset) {
        ChatUserSetting entity = new ChatUserSetting( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chatBackImage
            cursor.getShort(offset + 2) != 0 // isShield
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatUserSetting entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setChatBackImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsShield(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatUserSetting entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatUserSetting entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatUserSetting entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
