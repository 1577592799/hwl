package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hwl.beta.db.entity.GroupUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_USER_INFO".
*/
public class GroupUserInfoDao extends AbstractDao<GroupUserInfo, Long> {

    public static final String TABLENAME = "GROUP_USER_INFO";

    /**
     * Properties of entity GroupUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupGuid = new Property(1, String.class, "groupGuid", false, "GROUP_GUID");
        public final static Property UserId = new Property(2, long.class, "userId", false, "USER_ID");
        public final static Property AddTime = new Property(3, java.util.Date.class, "addTime", false, "ADD_TIME");
    }


    public GroupUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroupUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_GUID\" TEXT," + // 1: groupGuid
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"ADD_TIME\" INTEGER);"); // 3: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(2, groupGuid);
        }
        stmt.bindLong(3, entity.getUserId());
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(4, addTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupUserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(2, groupGuid);
        }
        stmt.bindLong(3, entity.getUserId());
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(4, addTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupUserInfo readEntity(Cursor cursor, int offset) {
        GroupUserInfo entity = new GroupUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupGuid
            cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupUserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getLong(offset + 2));
        entity.setAddTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupUserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupUserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupUserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
