package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hwl.beta.db.entity.ChatGroupMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_GROUP_MESSAGE".
*/
public class ChatGroupMessageDao extends AbstractDao<ChatGroupMessage, Long> {

    public static final String TABLENAME = "CHAT_GROUP_MESSAGE";

    /**
     * Properties of entity ChatGroupMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, Long.class, "msgId", true, "_id");
        public final static Property GroupGuid = new Property(1, String.class, "groupGuid", false, "GROUP_GUID");
        public final static Property GroupName = new Property(2, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupImage = new Property(3, String.class, "groupImage", false, "GROUP_IMAGE");
        public final static Property FromUserId = new Property(4, long.class, "fromUserId", false, "FROM_USER_ID");
        public final static Property FromUserName = new Property(5, String.class, "fromUserName", false, "FROM_USER_NAME");
        public final static Property FromUserHeadImage = new Property(6, String.class, "fromUserHeadImage", false, "FROM_USER_HEAD_IMAGE");
        public final static Property ContentType = new Property(7, int.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property LocalUrl = new Property(9, String.class, "localUrl", false, "LOCAL_URL");
        public final static Property PreviewUrl = new Property(10, String.class, "previewUrl", false, "PREVIEW_URL");
        public final static Property OriginalUrl = new Property(11, String.class, "originalUrl", false, "ORIGINAL_URL");
        public final static Property ImageHeight = new Property(12, int.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property ImageWidth = new Property(13, int.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property Size = new Property(14, int.class, "size", false, "SIZE");
        public final static Property PlayTime = new Property(15, int.class, "playTime", false, "PLAY_TIME");
        public final static Property SendStatus = new Property(16, int.class, "sendStatus", false, "SEND_STATUS");
        public final static Property SendTime = new Property(17, java.util.Date.class, "sendTime", false, "SEND_TIME");
    }


    public ChatGroupMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatGroupMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_GROUP_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: msgId
                "\"GROUP_GUID\" TEXT," + // 1: groupGuid
                "\"GROUP_NAME\" TEXT," + // 2: groupName
                "\"GROUP_IMAGE\" TEXT," + // 3: groupImage
                "\"FROM_USER_ID\" INTEGER NOT NULL ," + // 4: fromUserId
                "\"FROM_USER_NAME\" TEXT," + // 5: fromUserName
                "\"FROM_USER_HEAD_IMAGE\" TEXT," + // 6: fromUserHeadImage
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 7: contentType
                "\"CONTENT\" TEXT," + // 8: content
                "\"LOCAL_URL\" TEXT," + // 9: localUrl
                "\"PREVIEW_URL\" TEXT," + // 10: previewUrl
                "\"ORIGINAL_URL\" TEXT," + // 11: originalUrl
                "\"IMAGE_HEIGHT\" INTEGER NOT NULL ," + // 12: imageHeight
                "\"IMAGE_WIDTH\" INTEGER NOT NULL ," + // 13: imageWidth
                "\"SIZE\" INTEGER NOT NULL ," + // 14: size
                "\"PLAY_TIME\" INTEGER NOT NULL ," + // 15: playTime
                "\"SEND_STATUS\" INTEGER NOT NULL ," + // 16: sendStatus
                "\"SEND_TIME\" INTEGER);"); // 17: sendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_GROUP_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatGroupMessage entity) {
        stmt.clearBindings();
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(2, groupGuid);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
 
        String groupImage = entity.getGroupImage();
        if (groupImage != null) {
            stmt.bindString(4, groupImage);
        }
        stmt.bindLong(5, entity.getFromUserId());
 
        String fromUserName = entity.getFromUserName();
        if (fromUserName != null) {
            stmt.bindString(6, fromUserName);
        }
 
        String fromUserHeadImage = entity.getFromUserHeadImage();
        if (fromUserHeadImage != null) {
            stmt.bindString(7, fromUserHeadImage);
        }
        stmt.bindLong(8, entity.getContentType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(10, localUrl);
        }
 
        String previewUrl = entity.getPreviewUrl();
        if (previewUrl != null) {
            stmt.bindString(11, previewUrl);
        }
 
        String originalUrl = entity.getOriginalUrl();
        if (originalUrl != null) {
            stmt.bindString(12, originalUrl);
        }
        stmt.bindLong(13, entity.getImageHeight());
        stmt.bindLong(14, entity.getImageWidth());
        stmt.bindLong(15, entity.getSize());
        stmt.bindLong(16, entity.getPlayTime());
        stmt.bindLong(17, entity.getSendStatus());
 
        java.util.Date sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(18, sendTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatGroupMessage entity) {
        stmt.clearBindings();
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }
 
        String groupGuid = entity.getGroupGuid();
        if (groupGuid != null) {
            stmt.bindString(2, groupGuid);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
 
        String groupImage = entity.getGroupImage();
        if (groupImage != null) {
            stmt.bindString(4, groupImage);
        }
        stmt.bindLong(5, entity.getFromUserId());
 
        String fromUserName = entity.getFromUserName();
        if (fromUserName != null) {
            stmt.bindString(6, fromUserName);
        }
 
        String fromUserHeadImage = entity.getFromUserHeadImage();
        if (fromUserHeadImage != null) {
            stmt.bindString(7, fromUserHeadImage);
        }
        stmt.bindLong(8, entity.getContentType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(10, localUrl);
        }
 
        String previewUrl = entity.getPreviewUrl();
        if (previewUrl != null) {
            stmt.bindString(11, previewUrl);
        }
 
        String originalUrl = entity.getOriginalUrl();
        if (originalUrl != null) {
            stmt.bindString(12, originalUrl);
        }
        stmt.bindLong(13, entity.getImageHeight());
        stmt.bindLong(14, entity.getImageWidth());
        stmt.bindLong(15, entity.getSize());
        stmt.bindLong(16, entity.getPlayTime());
        stmt.bindLong(17, entity.getSendStatus());
 
        java.util.Date sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(18, sendTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatGroupMessage readEntity(Cursor cursor, int offset) {
        ChatGroupMessage entity = new ChatGroupMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // msgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupGuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupImage
            cursor.getLong(offset + 4), // fromUserId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromUserName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fromUserHeadImage
            cursor.getInt(offset + 7), // contentType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // localUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // previewUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // originalUrl
            cursor.getInt(offset + 12), // imageHeight
            cursor.getInt(offset + 13), // imageWidth
            cursor.getInt(offset + 14), // size
            cursor.getInt(offset + 15), // playTime
            cursor.getInt(offset + 16), // sendStatus
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // sendTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatGroupMessage entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromUserId(cursor.getLong(offset + 4));
        entity.setFromUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFromUserHeadImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContentType(cursor.getInt(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocalUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPreviewUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOriginalUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImageHeight(cursor.getInt(offset + 12));
        entity.setImageWidth(cursor.getInt(offset + 13));
        entity.setSize(cursor.getInt(offset + 14));
        entity.setPlayTime(cursor.getInt(offset + 15));
        entity.setSendStatus(cursor.getInt(offset + 16));
        entity.setSendTime(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatGroupMessage entity, long rowId) {
        entity.setMsgId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatGroupMessage entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatGroupMessage entity) {
        return entity.getMsgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
