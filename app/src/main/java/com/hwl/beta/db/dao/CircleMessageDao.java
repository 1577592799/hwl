package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hwl.beta.db.entity.CircleMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIRCLE_MESSAGE".
*/
public class CircleMessageDao extends AbstractDao<CircleMessage, Long> {

    public static final String TABLENAME = "CIRCLE_MESSAGE";

    /**
     * Properties of entity CircleMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property CircleId = new Property(2, long.class, "circleId", false, "CIRCLE_ID");
        public final static Property UserId = new Property(3, long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property CommentId = new Property(5, int.class, "commentId", false, "COMMENT_ID");
        public final static Property Comment = new Property(6, String.class, "comment", false, "COMMENT");
        public final static Property ReplyUserId = new Property(7, long.class, "replyUserId", false, "REPLY_USER_ID");
        public final static Property ReplyUserName = new Property(8, String.class, "replyUserName", false, "REPLY_USER_NAME");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property UserImage = new Property(10, String.class, "userImage", false, "USER_IMAGE");
        public final static Property ActionTime = new Property(11, java.util.Date.class, "actionTime", false, "ACTION_TIME");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
    }


    public CircleMessageDao(DaoConfig config) {
        super(config);
    }
    
    public CircleMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIRCLE_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"CIRCLE_ID\" INTEGER NOT NULL ," + // 2: circleId
                "\"USER_ID\" INTEGER NOT NULL ," + // 3: userId
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"COMMENT_ID\" INTEGER NOT NULL ," + // 5: commentId
                "\"COMMENT\" TEXT," + // 6: comment
                "\"REPLY_USER_ID\" INTEGER NOT NULL ," + // 7: replyUserId
                "\"REPLY_USER_NAME\" TEXT," + // 8: replyUserName
                "\"CONTENT\" TEXT," + // 9: content
                "\"USER_IMAGE\" TEXT," + // 10: userImage
                "\"ACTION_TIME\" INTEGER," + // 11: actionTime
                "\"STATUS\" INTEGER NOT NULL );"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIRCLE_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CircleMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getCircleId());
        stmt.bindLong(4, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
        stmt.bindLong(6, entity.getCommentId());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(7, comment);
        }
        stmt.bindLong(8, entity.getReplyUserId());
 
        String replyUserName = entity.getReplyUserName();
        if (replyUserName != null) {
            stmt.bindString(9, replyUserName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
 
        String userImage = entity.getUserImage();
        if (userImage != null) {
            stmt.bindString(11, userImage);
        }
 
        java.util.Date actionTime = entity.getActionTime();
        if (actionTime != null) {
            stmt.bindLong(12, actionTime.getTime());
        }
        stmt.bindLong(13, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CircleMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getCircleId());
        stmt.bindLong(4, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
        stmt.bindLong(6, entity.getCommentId());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(7, comment);
        }
        stmt.bindLong(8, entity.getReplyUserId());
 
        String replyUserName = entity.getReplyUserName();
        if (replyUserName != null) {
            stmt.bindString(9, replyUserName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
 
        String userImage = entity.getUserImage();
        if (userImage != null) {
            stmt.bindString(11, userImage);
        }
 
        java.util.Date actionTime = entity.getActionTime();
        if (actionTime != null) {
            stmt.bindLong(12, actionTime.getTime());
        }
        stmt.bindLong(13, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CircleMessage readEntity(Cursor cursor, int offset) {
        CircleMessage entity = new CircleMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getLong(offset + 2), // circleId
            cursor.getLong(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.getInt(offset + 5), // commentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comment
            cursor.getLong(offset + 7), // replyUserId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // replyUserName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userImage
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // actionTime
            cursor.getInt(offset + 12) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CircleMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setCircleId(cursor.getLong(offset + 2));
        entity.setUserId(cursor.getLong(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommentId(cursor.getInt(offset + 5));
        entity.setComment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReplyUserId(cursor.getLong(offset + 7));
        entity.setReplyUserName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserImage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setActionTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setStatus(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CircleMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CircleMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CircleMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
