package com.hwl.beta.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.hwl.beta.db.entity.Friend;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Symbol = new Property(1, String.class, "symbol", false, "SYMBOL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property FirstLetter = new Property(4, String.class, "firstLetter", false, "FIRST_LETTER");
        public final static Property HeadImage = new Property(5, String.class, "headImage", false, "HEAD_IMAGE");
        public final static Property LifeNotes = new Property(6, String.class, "lifeNotes", false, "LIFE_NOTES");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property CircleBackImage = new Property(8, String.class, "circleBackImage", false, "CIRCLE_BACK_IMAGE");
        public final static Property Country = new Property(9, String.class, "country", false, "COUNTRY");
        public final static Property Province = new Property(10, String.class, "province", false, "PROVINCE");
        public final static Property UpdateTime = new Property(11, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SYMBOL\" TEXT," + // 1: symbol
                "\"NAME\" TEXT," + // 2: name
                "\"REMARK\" TEXT," + // 3: remark
                "\"FIRST_LETTER\" TEXT," + // 4: firstLetter
                "\"HEAD_IMAGE\" TEXT," + // 5: headImage
                "\"LIFE_NOTES\" TEXT," + // 6: lifeNotes
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"CIRCLE_BACK_IMAGE\" TEXT," + // 8: circleBackImage
                "\"COUNTRY\" TEXT," + // 9: country
                "\"PROVINCE\" TEXT," + // 10: province
                "\"UPDATE_TIME\" TEXT);"); // 11: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(2, symbol);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(5, firstLetter);
        }
 
        String headImage = entity.getHeadImage();
        if (headImage != null) {
            stmt.bindString(6, headImage);
        }
 
        String lifeNotes = entity.getLifeNotes();
        if (lifeNotes != null) {
            stmt.bindString(7, lifeNotes);
        }
        stmt.bindLong(8, entity.getSex());
 
        String circleBackImage = entity.getCircleBackImage();
        if (circleBackImage != null) {
            stmt.bindString(9, circleBackImage);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(10, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(11, province);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(12, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(2, symbol);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(5, firstLetter);
        }
 
        String headImage = entity.getHeadImage();
        if (headImage != null) {
            stmt.bindString(6, headImage);
        }
 
        String lifeNotes = entity.getLifeNotes();
        if (lifeNotes != null) {
            stmt.bindString(7, lifeNotes);
        }
        stmt.bindLong(8, entity.getSex());
 
        String circleBackImage = entity.getCircleBackImage();
        if (circleBackImage != null) {
            stmt.bindString(9, circleBackImage);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(10, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(11, province);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(12, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // symbol
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstLetter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lifeNotes
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // circleBackImage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // country
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // province
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSymbol(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstLetter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLifeNotes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setCircleBackImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCountry(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProvince(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Friend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Friend entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
